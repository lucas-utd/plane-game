# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CMake Build (Windows)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        os: [ windows-latest ]
        # vcpkg_root:
        #   - ubuntu-latest: $HOME/vcpkg
        #   - windows-latest: C:/vcpkg
      fail-fast: true
    runs-on: ${{ matrix.os}}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4


    - name: Set up the cache for VCPKG (Windows)
      id: cache-vcpkg
      # Cache vcpkg archives and the vcpkg directory
      # This is a workaround for the cache not being restored
      uses: actions/cache@v4
      with:
        path: |
          C:\Users\runneradmin\AppData\Local\vcpkg\archives
          C:\vcpkg
        key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
            vcpkg-${{ runner.os }}-

    - name: Install VCPKG (Windows)
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      # Check if vcpkg is already installed
      # If not, clone and bootstrap it
      # This is a workaround for the cache not being restored
      run: |
        if (Test-Path "C:\vcpkg") {
          rm -r -force C:\vcpkg
        }
        git clone https://github.com/microsoft/vcpkg.git C:\vcpkg
        C:\vcpkg\bootstrap-vcpkg.bat

    - name: Configure CMake with vcpkg (Windows)
      run: |
        cmake -S ${{ env.SOLUTION_FILE_PATH }} -B build `
          -DCMAKE_TOOLCHAIN_FILE="C:\vcpkg\scripts\buildsystems\vcpkg.cmake" `
          -DVCPKG_TARGET_ARCHITECTURE=x64 `
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_CONFIGURATION }} `
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        cmake --build build --config ${{ env.BUILD_CONFIGURATION }}
