# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CMake Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest ]
      fail-fast: true
    runs-on: ${{ matrix.os}}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: sudo apt update && sudo apt install -y cmake g++ ninja-build git libx11-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev libgl1-mesa-dev

    - name: Set up the cache for CMake (Linux)
      if: runner.os == 'Linux'
      uses: actions/cache@v4
      with:
        path: ~/vcpkg
        key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
            vcpkg-${{ runner.os }}-

    - name: Install VCPKG (Linux)
      if: runner.os == 'Linux'
      run: |
        # Check if vcpkg is already installed
        if [ ! -d "$HOME/vcpkg" ]; then
          echo "VCPKG not found, installing..."
          git clone https://github.com/microsoft/vcpkg.git ~/vcpkg
          cd ~/vcpkg
          ./bootstrap-vcpkg.sh
        fi

    - name: Configure CMake with vcpkg (Linux)
      if: runner.os == 'Linux'
      run: |
        cmake -S ${{ env.SOLUTION_FILE_PATH }} -B build \
          -DCMAKE_TOOLCHAIN_FILE=~/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DVCPKG_TARGET_ARCHITECTURE=x64 \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_CONFIGURATION }} \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        cmake --build build --config ${{ env.BUILD_CONFIGURATION }}