# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: cmake-vcpkg-build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
          - os: ubuntu-latest
            triplet: x64-linux

    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install Dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y cmake g++ ninja-build git libx11-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev libgl1-mesa-dev autoconf libtool
      shell: bash

    - name: Install Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install Ninja
        choco install ninja --yes
      shell: pwsh

    - name: Clean up workspace (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Remove any existing build directory
        if [ -d "build" ]; then
          rm -rf build
        fi
      shell: bash

    - name: Clean up workspace (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Remove any existing build directory
        if (Test-Path "build") {
          Remove-Item -Recurse -Force "build"
        }
        # Try to clean up the cache the previous runner
        cd ${{ github.workspace }}/vcpkg
        git clean -fdx
        git reset --hard HEAD
      shell: pwsh

    - name: Set up the cache for vcpkg (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/vcpkg
          ${{ github.workspace }}/vcpkg
        key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
            vcpkg-${{ runner.os }}-

    - name: Set up the cache for VCPKG (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v4
      with:
        path: |
          C:\Users\runneradmin\AppData\Local\vcpkg
          ${{ github.workspace }}/vcpkg
        key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
            vcpkg-${{ runner.os }}-

    - name: Build with CMake Presets
      run: cmake --workflow --preset x64-release


    # - name: Set up the cache for VCPKG (Windows)
    #   id: cache-vcpkg
    #   # Cache vcpkg archives and the vcpkg directory
    #   # This is a workaround for the cache not being restored
    #   uses: actions/cache@v4
    #   with:
    #     path: |
    #       C:\Users\runneradmin\AppData\Local\vcpkg
    #       C:\vcpkg
    #     key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
    #     restore-keys: |
    #         vcpkg-${{ runner.os }}-

    # - name: Install VCPKG (Windows)
    #   if: steps.cache-vcpkg.outputs.cache-hit != 'true'
    #   # Check if vcpkg is already installed
    #   # If not, clone and bootstrap it
    #   # This is a workaround for the cache not being restored
    #   run: |
    #     if (Test-Path "C:\vcpkg") {
    #       rm -r -force C:\vcpkg
    #     }
    #     git clone https://github.com/microsoft/vcpkg.git C:\vcpkg
    #     C:\vcpkg\bootstrap-vcpkg.bat

    # - name: Configure CMake with vcpkg (Windows)
    #   run: |
    #     cmake -S ${{ env.SOLUTION_FILE_PATH }} -B build `
    #       -DCMAKE_TOOLCHAIN_FILE="C:\vcpkg\scripts\buildsystems\vcpkg.cmake" `
    #       -DVCPKG_TARGET_ARCHITECTURE=x64 `
    #       -DCMAKE_BUILD_TYPE=${{ env.BUILD_CONFIGURATION }} `
    #       -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    #     cmake --build build --config ${{ env.BUILD_CONFIGURATION }}
